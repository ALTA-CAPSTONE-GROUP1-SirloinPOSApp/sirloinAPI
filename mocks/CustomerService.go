// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	customer "sirloinapi/features/customer"

	mock "github.com/stretchr/testify/mock"
)

// CustomerService is an autogenerated mock type for the CustomerService type
type CustomerService struct {
	mock.Mock
}

// Add provides a mock function with given fields: userToken, newCustomer
func (_m *CustomerService) Add(userToken interface{}, newCustomer customer.Core) (customer.Core, error) {
	ret := _m.Called(userToken, newCustomer)

	var r0 customer.Core
	if rf, ok := ret.Get(0).(func(interface{}, customer.Core) customer.Core); ok {
		r0 = rf(userToken, newCustomer)
	} else {
		r0 = ret.Get(0).(customer.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, customer.Core) error); ok {
		r1 = rf(userToken, newCustomer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerById provides a mock function with given fields: token, customerId
func (_m *CustomerService) GetCustomerById(token interface{}, customerId uint) (customer.Core, error) {
	ret := _m.Called(token, customerId)

	var r0 customer.Core
	if rf, ok := ret.Get(0).(func(interface{}, uint) customer.Core); ok {
		r0 = rf(token, customerId)
	} else {
		r0 = ret.Get(0).(customer.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint) error); ok {
		r1 = rf(token, customerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserCustomers provides a mock function with given fields: token
func (_m *CustomerService) GetUserCustomers(token interface{}) ([]customer.Core, error) {
	ret := _m.Called(token)

	var r0 []customer.Core
	if rf, ok := ret.Get(0).(func(interface{}) []customer.Core); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]customer.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userToken, customerId, updateData
func (_m *CustomerService) Update(userToken interface{}, customerId uint, updateData customer.Core) (customer.Core, error) {
	ret := _m.Called(userToken, customerId, updateData)

	var r0 customer.Core
	if rf, ok := ret.Get(0).(func(interface{}, uint, customer.Core) customer.Core); ok {
		r0 = rf(userToken, customerId, updateData)
	} else {
		r0 = ret.Get(0).(customer.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint, customer.Core) error); ok {
		r1 = rf(userToken, customerId, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCustomerService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustomerService creates a new instance of CustomerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomerService(t mockConstructorTestingTNewCustomerService) *CustomerService {
	mock := &CustomerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
