// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	customer "sirloinapi/features/customer"

	mock "github.com/stretchr/testify/mock"
)

// CustomerData is an autogenerated mock type for the CustomerData type
type CustomerData struct {
	mock.Mock
}

// Add provides a mock function with given fields: userId, newCustomer
func (_m *CustomerData) Add(userId uint, newCustomer customer.Core) (customer.Core, error) {
	ret := _m.Called(userId, newCustomer)

	var r0 customer.Core
	if rf, ok := ret.Get(0).(func(uint, customer.Core) customer.Core); ok {
		r0 = rf(userId, newCustomer)
	} else {
		r0 = ret.Get(0).(customer.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, customer.Core) error); ok {
		r1 = rf(userId, newCustomer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerById provides a mock function with given fields: userId, customerId
func (_m *CustomerData) GetCustomerById(userId uint, customerId uint) (customer.Core, error) {
	ret := _m.Called(userId, customerId)

	var r0 customer.Core
	if rf, ok := ret.Get(0).(func(uint, uint) customer.Core); ok {
		r0 = rf(userId, customerId)
	} else {
		r0 = ret.Get(0).(customer.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userId, customerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserCustomers provides a mock function with given fields: userId
func (_m *CustomerData) GetUserCustomers(userId uint) ([]customer.Core, error) {
	ret := _m.Called(userId)

	var r0 []customer.Core
	if rf, ok := ret.Get(0).(func(uint) []customer.Core); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]customer.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userId, customerId, updateData
func (_m *CustomerData) Update(userId uint, customerId uint, updateData customer.Core) (customer.Core, error) {
	ret := _m.Called(userId, customerId, updateData)

	var r0 customer.Core
	if rf, ok := ret.Get(0).(func(uint, uint, customer.Core) customer.Core); ok {
		r0 = rf(userId, customerId, updateData)
	} else {
		r0 = ret.Get(0).(customer.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, customer.Core) error); ok {
		r1 = rf(userId, customerId, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCustomerData interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustomerData creates a new instance of CustomerData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomerData(t mockConstructorTestingTNewCustomerData) *CustomerData {
	mock := &CustomerData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
