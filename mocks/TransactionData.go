// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	transaction "sirloinapi/features/transaction"

	mock "github.com/stretchr/testify/mock"
)

// TransactionData is an autogenerated mock type for the TransactionData type
type TransactionData struct {
	mock.Mock
}

// AddBuy provides a mock function with given fields: userId, uCart
func (_m *TransactionData) AddBuy(userId uint, uCart transaction.Cart) (transaction.Core, error) {
	ret := _m.Called(userId, uCart)

	var r0 transaction.Core
	if rf, ok := ret.Get(0).(func(uint, transaction.Cart) transaction.Core); ok {
		r0 = rf(userId, uCart)
	} else {
		r0 = ret.Get(0).(transaction.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, transaction.Cart) error); ok {
		r1 = rf(userId, uCart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddSell provides a mock function with given fields: userId, uCart
func (_m *TransactionData) AddSell(userId uint, uCart transaction.Cart) (transaction.Core, error) {
	ret := _m.Called(userId, uCart)

	var r0 transaction.Core
	if rf, ok := ret.Get(0).(func(uint, transaction.Cart) transaction.Core); ok {
		r0 = rf(userId, uCart)
	} else {
		r0 = ret.Get(0).(transaction.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, transaction.Cart) error); ok {
		r1 = rf(userId, uCart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdminTransactionDetails provides a mock function with given fields: transactionId
func (_m *TransactionData) GetAdminTransactionDetails(transactionId uint) (transaction.AdmTransactionResDet, error) {
	ret := _m.Called(transactionId)

	var r0 transaction.AdmTransactionResDet
	if rf, ok := ret.Get(0).(func(uint) transaction.AdmTransactionResDet); ok {
		r0 = rf(transactionId)
	} else {
		r0 = ret.Get(0).(transaction.AdmTransactionResDet)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(transactionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdminTransactionHistory provides a mock function with given fields: status, from, to
func (_m *TransactionData) GetAdminTransactionHistory(status string, from string, to string) ([]transaction.AdmTransactionRes, error) {
	ret := _m.Called(status, from, to)

	var r0 []transaction.AdmTransactionRes
	if rf, ok := ret.Get(0).(func(string, string, string) []transaction.AdmTransactionRes); ok {
		r0 = rf(status, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.AdmTransactionRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(status, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionDetails provides a mock function with given fields: transactionId
func (_m *TransactionData) GetTransactionDetails(transactionId uint) (transaction.TransactionRes, error) {
	ret := _m.Called(transactionId)

	var r0 transaction.TransactionRes
	if rf, ok := ret.Get(0).(func(uint) transaction.TransactionRes); ok {
		r0 = rf(transactionId)
	} else {
		r0 = ret.Get(0).(transaction.TransactionRes)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(transactionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionHistory provides a mock function with given fields: userId, status, from, to, sendEmail
func (_m *TransactionData) GetTransactionHistory(userId uint, status string, from string, to string, sendEmail string) ([]transaction.Core, error) {
	ret := _m.Called(userId, status, from, to, sendEmail)

	var r0 []transaction.Core
	if rf, ok := ret.Get(0).(func(uint, string, string, string, string) []transaction.Core); ok {
		r0 = rf(userId, status, from, to, sendEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string, string, string, string) error); ok {
		r1 = rf(userId, status, from, to, sendEmail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationTransactionStatus provides a mock function with given fields: invoiceNo, transStatus
func (_m *TransactionData) NotificationTransactionStatus(invoiceNo string, transStatus string) error {
	ret := _m.Called(invoiceNo, transStatus)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(invoiceNo, transStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: transactionId, status
func (_m *TransactionData) UpdateStatus(transactionId uint, status string) error {
	ret := _m.Called(transactionId, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = rf(transactionId, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTransactionData interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionData creates a new instance of TransactionData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionData(t mockConstructorTestingTNewTransactionData) *TransactionData {
	mock := &TransactionData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
